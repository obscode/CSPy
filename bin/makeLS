#!/usr/bin/env python
import argparse

def keyvent(event):
   global cut,keep_going,args
   if event.key == 'Q':
      keep_going = False
      plt.close(event.inaxes.figure)
      return

   if cat[event.inaxes.idx]['good']:
      cat[event.inaxes.idx]['good'] = False
      [ap.set_color('red') for ap in event.inaxes.aps]
   else:
      cat[event.inaxes.idx]['good'] = True
      [ap.set_color('green') for ap in event.inaxes.aps]
      if args.v:
          print(cat[event.inaxes.idx])
   plt.draw()


parser = argparse.ArgumentParser(description="Given an inital catalog, this"\
      " script helps you interactively select good LS stars")
parser.add_argument('FITS', help='FITS files to get images from', nargs="+")
parser.add_argument('-cat', help='Initial catalog file')
parser.add_argument('-auto', help='Automatically flag good stars to start',
                    action='store_true')
parser.add_argument('-cutout', help="cutout size in pixels", type=int,
      default=50)
parser.add_argument('-output', help='Final output LS catalog',
      default='LS.cat')
parser.add_argument('-plot', help='Plot the finder chart',
      action="store_true")
parser.add_argument('-cspoutput', help='Final output LS catalog in CSP format',
      default='mycat.cat')
parser.add_argument('-n', help='number of rows/columns to show', default=10,
      type=int)
parser.add_argument('-mmax', help='Maximum magnitude', default=20, type=float)
parser.add_argument('-mmin', help='Minimum magnitude', default=11, type=float)
parser.add_argument('-scale', help='Image scale arc-sec/pix', default=0.435)
parser.add_argument('-aps', help='list of aperture radii in arc-sec',
      default=[], nargs='*')
parser.add_argument('-db', help='Database to query if we need coordinates',
                    default='POISE')
parser.add_argument('-v', help='Verbose', action='store_true')

args = parser.parse_args()

from astropy.io import fits,ascii
from matplotlib import pyplot as plt
from matplotlib.patches import Circle,Rectangle
from astropy.wcs import WCS
from astropy.visualization import simple_norm
from CSPlib import fchart, database
from CSPlib.phot import ApPhot
from CSPlib.objmatch import FindIsolatedStars
from CSPlib.getRefcat2 import getStarCat
import numpy as np
import sys

cut = args.cutout

if args.cat is None:
   # Query the refcat2 catalog
   fts = fits.open(args.FITS[0])
   obj = fts[0].header['OBJECT']
   res = database.getNameCoords(obj, db=args.db)
   print(res)
   if res == -1:
      print("Error, object {} not found in database".format(obj))
      sys.exit(1)
   elif res == -2:
      print("Database connection failed")
      sys.exit(1)
   cat = getStarCat(res[0], res[1], np.sqrt(2)*0.125, mmin=args.mmin, 
                    mmax=args.mmax)
   print(cat.colnames)
   cat.sort(keys='rmag')
   cat.insert_row(0, [0, res[0],res[1],-1,-1,-1,-1,-1,-1])

else:
   cat = ascii.read(args.cat)
cat['good'] = False
# First object (SN) must be good

if args.auto:
   p = ApPhot(args.FITS[0])
   tab = p.SourceFinder(3,10)
   cat = FindIsolatedStars(tab, cat, p.wcs, 11, 40)

# SN is always good
cat[0]['good'] = True

outf = open(args.cspoutput, 'a')
outfmt = "{:20s} {:3d} {:10.6f}    {:10.6f}\n"

ftss = [fits.open(f) for f in args.FITS]
gids = np.ones((len(cat),), dtype=bool)
for fts in ftss:
   wcs = WCS(fts[0])
   ii,jj = wcs.wcs_world2pix(cat['RA'], cat['DEC'], 0)
   naxis2,naxis1 = fts[0].data.shape
   gids = gids * np.greater(ii, cut) * np.less(ii, naxis1-cut) *\
          np.greater(jj, cut) * np.less(jj, naxis2-cut)
      
cat = cat[gids]

# How many plots are needed to fit all postage stamps
n = args.n
nplots = len(cat)//n**2 + ((len(cat) % n**2) > 0)

obj = None
for fts in ftss:
   if not obj: obj = fts[0].header['OBJECT']

   norm = simple_norm(fts[0].data, percent=99)
   wcs = WCS(fts[0])

   keep_going = True
   for i in range(nplots):
      if not keep_going:
         break
      fig = plt.figure(figsize=(10,10), constrained_layout=False)
      grid = fig.add_gridspec(n,n, wspace=0, hspace=0)
      axes = grid.subplots()
      axes = axes.ravel()
      [ax.xaxis.set_visible(False) for ax in axes]
      [ax.yaxis.set_visible(False) for ax in axes]
      for j in range(n**2):
         idx = i*n**2 + j
         if idx > len(cat)-1: break
         ii,jj = wcs.wcs_world2pix(cat['RA'][idx],cat['DEC'][idx], 0)
         ii = int(ii)
         jj = int(jj)
         subd = fts[0].data[jj-cut:jj+cut,ii-cut:ii+cut]
         axes[j]._im = axes[j].imshow(subd, origin='lower', norm=norm)
         axes[j].idx = idx
         axes[j].aps = []
         for ap in args.aps:
            circ = plt.Circle((cut,cut), float(ap)/args.scale,
                  color={False:'red',True:'green'}[cat[idx]['good']], 
                  linewidth=1, fill=False, alpha=0.5)
            axes[j].aps.append(axes[j].add_patch(circ))
      
      fig.canvas.mpl_connect('key_press_event', keyvent)
      plt.show()

cat = cat[cat['good']]
cat.remove_column('good')
cat.write(args.output, format='ascii.fixed_width', delimiter=' ', overwrite=True)
for i in range(len(cat)):
   outf.write(outfmt.format(obj, i, cat['RA'][i], cat['DEC'][i]))
outf.close()

if args.plot:
   cat['objID'] = np.arange(len(cat))
   fig = fchart.Fchart(ftss[0], LScat=cat[1:], snx=cat[0]['RA'], 
                       sny=cat[0]['DEC'], zoomfac=None)
   fig.savefig(args.FITS[0].replace('.fits','_fchart.pdf'))

